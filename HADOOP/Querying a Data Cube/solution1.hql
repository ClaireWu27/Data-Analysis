! record solution1.txt

SELECT O.O_CUSTKEY, L.L_SUPPKEY, SUM(L.L_QUANTITY) AS total_ordered_parts 

FROM ORDERS O 

JOIN LINEITEM L ON O.O_ORDERKEY = L.L_ORDERKEY 

WHERE O.O_CLERK IN ('Clerk#000000988', 'Clerk#000000992') 

GROUP BY O.O_CUSTKEY, L.L_SUPPKEY WITH CUBE; 



SELECT L_PARTKEY, L_SUPPKEY, MAX(L_DISCOUNT) AS max_discount 

FROM LINEITEM  

WHERE L_PARTKEY IN (18, 19,20) 

GROUP BY L_PARTKEY, L_SUPPKEY WITH ROLLUP; 


SELECT YEAR(O.O_ORDERDATE) AS order_year, O.O_CLERK, MIN(L.L_EXTENDEDPRICE) AS min_price 

FROM ORDERS O JOIN LINEITEM L ON O.O_ORDERKEY = L.L_ORDERKEY 

GROUP BY YEAR(O.O_ORDERDATE), O.O_CLERK 

GROUPING SETS ((Year(O.O_ORDERDATE), O.O_CLERK)); 


SELECT DISTINCT YEAR(O.O_ORDERDATE) AS order_year, O.O_CLERK, MIN(L.L_EXTENDEDPRICE)  

OVER (PARTITION BY (YEAR(O.O_ORDERDATE) , O.O_CLERK)) AS min_price 

FROM ORDERS O JOIN LINEITEM L ON O.O_ORDERKEY = L.L_ORDERKEY; 



SELECT PS_PARTKEY, PS_AVAILQTY, 

MIN(PS_AVAILQTY)  OVER (PARTITION BY PS_PARTKEY ) AS min_avail_qty,  

AVG(PS_AVAILQTY) OVER (PARTITION BY PS_PARTKEY) AS avg_avail_qty 

FROM PARTSUPP 

WHERE PS_PARTKEY IN (18,19,20); 


SELECT PS_PARTKEY,  

PS_AVAILQTY, 

ROW_NUMBER() OVER (PARTITION BY PS_PARTKEY ORDER BY PS_AVAILQTY DESC) AS rank 

FROM PARTSUPP 

WHERE PS_PARTKEY IN (18,19,20); 


SELECT PS_PARTKEY,  

PS_AVAILQTY, 

AVG(PS_AVAILQTY) OVER (PARTITION BY PS_PARTKEY ORDER BY PS_AVAILQTY ROWS UNBOUNDED PRECEDING) AS avg_avail_qty 

FROM PARTSUPP 

WHERE PS_PARTKEY IN (18,19,20); 

!record
